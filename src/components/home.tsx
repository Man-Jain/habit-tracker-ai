/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/a5T6PcdO6cS
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { MinusIcon, PlusIcon } from "lucide-react";
import { Input } from "@/components/ui/input";

// Define the Habit type
type Habit = {
  id: string;
  name: string;
  emoji: string;
  currentValue: number;
  dailyGoal: number;
  unit: string;
  increment: number;
};

export function HabitsList() {
  // Load habits from localStorage on component mount
  const [habits, setHabits] = useState<Habit[]>(() => {
    const savedHabits = localStorage.getItem("habits");
    return savedHabits
      ? JSON.parse(savedHabits)
      : [
          {
            id: "1",
            name: "Drink Water",
            emoji: "💧",
            currentValue: 1200,
            dailyGoal: 2000,
            unit: "ml",
            increment: 400,
          },
          {
            id: "2",
            name: "Read",
            emoji: "📚",
            currentValue: 15,
            dailyGoal: 20,
            unit: "pages",
            increment: 10,
          },
          {
            id: "3",
            name: "Exercise",
            emoji: "🏋️",
            currentValue: 25,
            dailyGoal: 45,
            unit: "mins",
            increment: 30,
          },
        ];
  });

  // Save habits to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("habits", JSON.stringify(habits));
  }, [habits]);

  // Function to update habit value
  const updateHabitValue = (id: string, increment: boolean) => {
    setHabits(
      habits.map((habit) =>
        habit.id === id
          ? {
              ...habit,
              currentValue: Math.max(
                0,
                habit.currentValue +
                  (increment ? habit.increment : -habit.increment)
              ),
            }
          : habit
      )
    );
  };

  const [newHabit, setNewHabit] = useState<Omit<Habit, "id">>({
    name: "",
    emoji: "💧",
    currentValue: 0,
    dailyGoal: 100,
    unit: "units",
    increment: 10,
  });

  const addHabit = (e: React.FormEvent) => {
    e.preventDefault();
    const habit: Habit = {
      ...newHabit,
      id: Date.now().toString(),
    };
    setHabits([...habits, habit]);
    setNewHabit({
      name: "",
      emoji: "💧",
      currentValue: 0,
      dailyGoal: 100,
      unit: "units",
      increment: 10,
    });
  };

  // Add a state for the inspirational quote
  const [quote, setQuote] = useState(
    "The secret of getting ahead is getting started."
  );

  // You could potentially fetch a random quote from an API here
  useEffect(() => {
    // For now, we'll just use a static quote
    // But you could replace this with an API call to get a random quote
    setQuote("The secret of getting ahead is getting started.");
  }, []);

  return (
    <div className="w-full max-w-md mx-auto py-1 sm:py-2 bg-white">
      <div className="text-center mb-4 sm:mb-6">
        <h1 className="text-2xl sm:text-3xl font-bold text-[#4a4a4a] dark:text-[#f0f0f0] flex items-center justify-center">
          <span className="mr-2">🌟</span> Habits
        </h1>
        <p className="text-xs sm:text-sm text-[#7a7a7a] dark:text-[#b0b0b0] mt-1 sm:mt-2 italic">
          &quot;{quote}&quot;
        </p>
      </div>
      <div className="grid gap-4 mb-8">
        {habits.map((habit) => (
          <Card
            key={habit.id}
            className="p-3 sm:p-4 bg-[#fff] dark:bg-[#2a2a2a] shadow-md"
          >
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <div className="flex items-center gap-2 mb-2 sm:mb-0">
                <span className="text-xl sm:text-2xl">{habit.emoji}</span>
                <h3 className="text-base sm:text-lg font-medium text-[#4a4a4a] dark:text-[#f0f0f0]">
                  {habit.name}
                </h3>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => updateHabitValue(habit.id, false)}
                >
                  <MinusIcon className="w-3 h-3 sm:w-4 sm:h-4 text-[#4a4a4a] dark:text-[#f0f0f0]" />
                </Button>
                <span className="text-xl sm:text-2xl font-bold text-[#4a4a4a] dark:text-[#f0f0f0]">
                  {habit.currentValue}
                </span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => updateHabitValue(habit.id, true)}
                >
                  <PlusIcon className="w-3 h-3 sm:w-4 sm:h-4 text-[#4a4a4a] dark:text-[#f0f0f0]" />
                </Button>
              </div>
            </div>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between text-xs sm:text-sm text-[#7a7a7a] dark:text-[#b0b0b0] mt-2">
              <span>
                Daily Goal: <span className="mr-1">{habit.dailyGoal}</span>
                {habit.unit}
              </span>
              <span>
                Current: <span className="mr-1">{habit.currentValue}</span>
                {habit.unit}
              </span>
            </div>
            <div className="w-full bg-[#f0f0f0] dark:bg-[#3a3a3a] rounded-full mt-2">
              <div
                className={`bg-[#${getIconColor(habit.name)}] h-2 rounded-full`}
                style={{
                  width: `${Math.min(
                    (habit.currentValue / habit.dailyGoal) * 100,
                    100
                  )}%`,
                }}
              />
            </div>
          </Card>
        ))}
      </div>

      <hr className="my-8" />

      <div className="mb-4 sm:mb-6">
        <h2 className="text-xl sm:text-2xl font-semibold text-[#4a4a4a] dark:text-[#f0f0f0] flex items-center">
          <span className="mr-2">➕</span> Add New Habit
        </h2>
      </div>

      <form onSubmit={addHabit} className="space-y-3 sm:space-y-4">
        <Input
          placeholder="Habit name"
          value={newHabit.name}
          onChange={(e) => setNewHabit({ ...newHabit, name: e.target.value })}
          required
          className="text-sm sm:text-base"
        />
        <Input
          placeholder="Emoji"
          value={newHabit.emoji}
          onChange={(e) => setNewHabit({ ...newHabit, emoji: e.target.value })}
          required
          className="text-sm sm:text-base"
        />
        <Input
          type="number"
          placeholder="Daily goal"
          value={newHabit.dailyGoal}
          onChange={(e) =>
            setNewHabit({ ...newHabit, dailyGoal: parseInt(e.target.value) })
          }
          required
          className="text-sm sm:text-base"
        />
        <Input
          placeholder="Unit"
          value={newHabit.unit}
          onChange={(e) => setNewHabit({ ...newHabit, unit: e.target.value })}
          required
          className="text-sm sm:text-base"
        />
        <Input
          type="number"
          placeholder="Increment"
          value={newHabit.increment}
          onChange={(e) =>
            setNewHabit({ ...newHabit, increment: parseInt(e.target.value) })
          }
          required
          className="text-sm sm:text-base"
        />
        <Button type="submit" className="w-full text-sm sm:text-base">
          Add Habit
        </Button>
      </form>
    </div>
  );
}

// Helper function to get icon color based on habit name
function getIconColor(habitName: string): string {
  switch (habitName) {
    case "Drink Water":
      return "a0d8ef";
    case "Read":
      return "ffd1dc";
    case "Exercise":
      return "b5e7a0";
    default:
      return "a0d8ef";
  }
}
